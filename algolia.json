[{"objectID":"6a3cf749295e4650d3d3cfd507f8fe9ff3d71a9d","permalink":"/post/%E5%A6%82%E4%BD%95%E5%9C%A8%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2%E9%A1%B5%E9%9D%A2%E4%BD%BF%E7%94%A8%E8%87%AA%E5%B7%B1%E7%9A%84live2d%E6%A8%A1%E5%9E%8B/","title":"如何在自己的博客页面使用自己的live2d模型","content":" 如何在自己的博客页面使用自定义Live2D模型 在Hugo站点（我使用的是Reimu主题，其他主题也是同理的）中集成自定义Live2D模型，需要配置资源加载、处理CDN问题和大文件等。下面是详细步骤，基于我的实际经验（包括模型加载失败、CDN加载失败、GitHub Raw 400错误和大文件限制等等问题）。\n1: 准备Live2D资源 创建GitHub仓库：新建一个公开仓库（如your_github_username/live2d_api），下载live2d-api仓库的model文件夹以及model.json文件上传到新建仓库。后续对应的文件目录结构也要参考这个库下面的教程。 下载live2d-widget库下dist文件夹的所有内容，上传到仓库。确保分支为main。 如果要上传自己的Live2D模型文件（.moc3、.json、纹理图片等)，只需要薅来的模型文件中把model.json或者说model3.json改名为index.json就可以了，但是注意命名不要有中文，会出现乱码。当然上传了新模型的话，对应的modellist也需要对应修改，这部分很简单，可以直接参考live2d-api仓库的教程。\n关键文件：\nwaifu-tips.json：交互框内容。（我是下载下来按照自己喜好修改了，如果你觉得原来的也行的话，就用源仓库的也行）。 waifu.css 和 waifu-tips.js：样式和模型加载脚本。 modellist.json:模型存放信息，用于加载模型。 关于访问： 每次上传了新的模型，需要点击该仓库的tag，然后新建release，只有这样后续才能使用cdn链接加载你的模型。 注意：仓库必须公开，否则Raw访问会返回400 Bad Request。如果你想吃现成的话当然也可以直接照抄我的仓库，也有一些我嫖到的免费模型:live2d_api\n2: 配置Reimu主题中的Live2D Reimu主题内置Live2D支持（在themes/reimu/static/resources/live2d-widgets@0.9.0/autoload.js）。别的主题也应该有，如果没有的话可以把live2d-widget仓库下载下来把autoload.js保存到跟这个主题对应的位置。我的autoload.js是已经修改过的，所以说可能和原版不太一样，如果原版的不太行的话，可以尝试一下我的：\n// live2d_path 参数建议使用绝对路径 const live2d_path = \u0026#34;https://fastly.jsdelivr.net/npm/live2d-widgets@1.0.0-rc.7/dist/\u0026#34;; // 封装异步加载资源的方法 function loadExternalResource (url, type) { return new Promise((resolve, reject) =\u0026gt; { let tag; if (type === \u0026#34;css\u0026#34;) { tag = document.createElement(\u0026#34;link\u0026#34;); tag.rel = \u0026#34;stylesheet\u0026#34;; tag.href = url; } else if (type === \u0026#34;js\u0026#34;) { tag = document.createElement(\u0026#34;script\u0026#34;); tag.type = \u0026#39;module\u0026#39;; tag.src = url; } if (tag) { tag.onload = () =\u0026gt; resolve(url); tag.onerror = () =\u0026gt; reject(url); document.head.appendChild(tag); } }); } // 避免跨域图片资源问题 const OriginalImage = window.Image; window.Image = function (...args) { const img = new OriginalImage(...args); img.crossOrigin = \u0026#34;anonymous\u0026#34;; return img; }; window.Image.prototype = OriginalImage.prototype; // 加载 waifu.css 和 waifu-tips.js (async () =\u0026gt; { // 备用CDN列表，如果主CDN无法访问会自动尝试备用CDN const cdnList = [ \u0026#34;https://fastly.jsdelivr.net/gh/nizigen/live2d_api@v1.4/\u0026#34;, \u0026#34;https://cdn.jsdelivr.net/gh/nizigen/live2d_api@v1.4/\u0026#34;, \u0026#34;https://raw.githubusercontent.com/nizigen/live2d_api/v1.4/\u0026#34;, \u0026#34;https://gcore.jsdelivr.net/gh/nizigen/live2d_api@v1.4/\u0026#34; ]; let currentCdnIndex = 0; let loadSuccess = false; // 尝试加载资源的函数，支持本地优先+CDN回退 async function tryLoadResources (cdnUrl) { try { // 优先尝试加载本地CSS let cssPromise; try { cssPromise = loadExternalResource(\u0026#34;/waifu.css\u0026#34;, \u0026#34;css\u0026#34;); console.log(\u0026#34;尝试加载本地CSS: /waifu.css\u0026#34;); } catch (localError) { console.warn(\u0026#34;本地CSS加载失败，使用CDN:\u0026#34;, localError); cssPromise = loadExternalResource(cdnUrl + \u0026#34;waifu.css\u0026#34;, \u0026#34;css\u0026#34;); } await Promise.all([ cssPromise, loadExternalResource(cdnUrl + \u0026#34;waifu-tips.js\u0026#34;, \u0026#34;js\u0026#34;) ]); loadSuccess = true; return cdnUrl; } catch (error) { console.warn(`CDN ${cdnUrl} 加载失败，尝试下一个...`); return null; } } // 尝试所有CDN直到成功或全部失败 while (!loadSuccess \u0026amp;\u0026amp; currentCdnIndex \u0026lt; cdnList.length) { const result = await tryLoadResources(cdnList[currentCdnIndex]); if (result) { console.log(`成功使用CDN: ${result}`); break; } currentCdnIndex++; } if (!loadSuccess) { console.error(\u0026#34;所有CDN都无法访问，Live2D功能将被禁用\u0026#34;); return; } const workingCdn = cdnList[currentCdnIndex]; // 配置选项的具体用法见 README.md try { console.log(\u0026#34;初始化Live2D Widget...\u0026#34;); console.log(\u0026#34;工作CDN:\u0026#34;, workingCdn); console.log(\u0026#34;waifu-tips.json路径:\u0026#34;, workingCdn + \u0026#34;waifu-tips.json\u0026#34;); initWidget({ waifuPath: workingCdn + \u0026#34;waifu-tips.json\u0026#34;, cdnPath: workingCdn, cubism2Path: live2d_path + \u0026#34;live2d.min.js\u0026#34;, cubism5Path: \u0026#34;https://cubism.live2d.com/sdk-web/cubismcore/live2dcubismcore.min.js\u0026#34;, tools: [\u0026#34;hitokoto\u0026#34;, \u0026#34;asteroids\u0026#34;, \u0026#34;switch-model\u0026#34;, \u0026#34;switch-texture\u0026#34;, \u0026#34;photo\u0026#34;, \u0026#34;info\u0026#34;, \u0026#34;quit\u0026#34;], logLevel: \u0026#34;info\u0026#34;, // 改为info级别以获得更多调试信息 drag: false }); console.log(\u0026#34;Live2D Widget初始化完成\u0026#34;); // 添加必要的CSS样式确保Live2D正确显示 const style = document.createElement(\u0026#39;style\u0026#39;); style.textContent = ` #waifu.waifu-active { bottom: 0 !important; transform: translateY(0) !important; } #waifu.waifu-hidden { bottom: -1000px !important; } #live2d { display: block !important; visibility: visible !important; pointer-events: auto !important; } #waifu-tool { display: block !important; opacity: 1 !important; pointer-events: auto !important; } #waifu-tips { display: block !important; pointer-events: auto !important; } `; document.head.appendChild(style); // 清除可能导致问题的缓存 localStorage.removeItem(\u0026#34;modelId\u0026#34;); localStorage.removeItem(\u0026#34;modelTexturesId\u0026#34;); } catch (error) { console.error(\u0026#34;Live2D初始化失败:\u0026#34;, error); console.warn(\u0026#34;建议检查网络连接或更换CDN源\u0026#34;); } // 添加全局错误处理，防止Live2D错误导致页面崩溃 window.addEventListener(\u0026#39;error\u0026#39;, (event) =\u0026gt; { // 处理Live2D相关的错误 if (event.message \u0026amp;\u0026amp; event.message.includes(\u0026#39;hitTest\u0026#39;)) { console.warn(\u0026#34;Live2D hitTest错误，已自动修复:\u0026#34;, event.message); event.preventDefault(); // 阻止错误传播 return false; } // 处理资源加载错误 if (event.filename \u0026amp;\u0026amp; (event.filename.includes(\u0026#39;live2d\u0026#39;) || event.filename.includes(\u0026#39;textures.cache\u0026#39;))) { console.warn(\u0026#34;Live2D资源加载错误，已自动处理:\u0026#34;, event.message); event.preventDefault(); return false; } }); // 添加额外的检查和调试信息 setTimeout(() =\u0026gt; { const waifuElement = document.getElementById(\u0026#39;waifu\u0026#39;); const live2dCanvas = document.getElementById(\u0026#39;live2d\u0026#39;); console.log(\u0026#34;Live2D元素检查:\u0026#34;); console.log(\u0026#34;- waifu元素存在:\u0026#34;, !!waifuElement); console.log(\u0026#34;- live2d画布存在:\u0026#34;, !!live2dCanvas); if (waifuElement) { console.log(\u0026#34;- waifu类名:\u0026#34;, waifuElement.className); console.log(\u0026#34;- waifu样式:\u0026#34;, getComputedStyle(waifuElement).bottom); } if (live2dCanvas) { console.log(\u0026#34;- 画布尺寸:\u0026#34;, live2dCanvas.width, \u0026#34;x\u0026#34;, live2dCanvas.height); console.log(\u0026#34;- 画布样式:\u0026#34;, getComputedStyle(live2dCanvas).display, getComputedStyle(live2dCanvas).visibility); } // 如果画布存在但不可见，强制显示 if (live2dCanvas \u0026amp;\u0026amp; getComputedStyle(live2dCanvas).display === \u0026#39;none\u0026#39;) { console.log(\u0026#34;强制显示Live2D画布\u0026#34;); live2dCanvas.style.display = \u0026#39;block\u0026#39;; live2dCanvas.style.visibility = \u0026#39;visible\u0026#39;; } // 如果waifu元素存在但没有active类，添加它 if (waifuElement \u0026amp;\u0026amp; !waifuElement.classList.contains(\u0026#39;waifu-active\u0026#39;)) { console.log(\u0026#34;添加waifu-active类\u0026#34;); waifuElement.classList.add(\u0026#39;waifu-active\u0026#39;); } // 如果Live2D加载失败，尝试降级方案 if (!live2dCanvas || live2dCanvas.width === 0) { console.warn(\u0026#34;Live2D模型加载失败，尝试降级显示\u0026#34;); // 可以在这里添加降级的静态图片显示 } }, 3000); })(); console.log(` く__,.ヘヽ. / ,ー､ 〉 ＼ \u0026#39;, !-─‐-i / /´ ／｀ｰ\u0026#39; L/／｀ヽ､ / ／, /| , , \u0026#39;, ｲ / /-‐/ ｉ L_ ﾊ ヽ! i ﾚ ﾍ 7ｲ｀ﾄ ﾚ\u0026#39;ｧ-ﾄ､!ハ| | !,/7 \u0026#39;0\u0026#39; ´0iソ| | |.从\u0026#34; _ ,,,, / |./ | ﾚ\u0026#39;| i＞.､,,__ _,.イ / .i | ﾚ\u0026#39;| | / k_７_/ﾚ\u0026#39;ヽ, ﾊ. | | |/i 〈|/ i ,.ﾍ | i | .|/ / ｉ： ﾍ! ＼ | kヽ\u0026gt;､ﾊ _,.ﾍ､ /､! !\u0026#39;〈//｀Ｔ´\u0026#39;, ＼ ｀\u0026#39;7\u0026#39;ｰr\u0026#39; ﾚ\u0026#39;ヽL__|___i,___,ンﾚ|ノ ﾄ-,/ |___./ \u0026#39;ｰ\u0026#39; !_,.: `); 启用Live2D：在config/_default/params.yml中设置（这就是Reimu专属的配置文件了，别的主题我不清楚，所以推荐大家都来用这个主题喵！）：\nlive2d_widgets: enable: true position: left # 或 right 修改autoload.js：原来的版本会有一个live2d-path，可以直接改成https://fastly.jsdelivr.net/npm/live2d-widgets@1.0.0-rc.7/dist/,我这里直接使用了多个cdn链接防止有的cdn链接无法访问，编辑themes/reimu/static/resources/live2d-widgets@0.9.0/autoload.js，调整CDN列表以避免加载失败：\nconst cdnList = [ \u0026#34;https://cdn.jsdelivr.net/gh/nizigen/live2d_api@main/\u0026#34;, // 稳定CDN优先 \u0026#34;https://fastly.jsdelivr.net/gh/nizigen/live2d_api@main/\u0026#34;, \u0026#34;https://gcore.jsdelivr.net/gh/nizigen/live2d_api@main/\u0026#34;, \u0026#34;https://raw.githubusercontent.com/nizigen/live2d_api/main/\u0026#34; // 作为备用 ]; 为什么这样？GitHub Raw不稳定（易400错误、限流），优先用jsDelivr代理，下面第三点对应的workingcdn其实就是通过cdnlist里面第一个能够使用的链接。还有就是加载Cubism3及以上的live2d模型需要core，我的尝试下https://fastly.jsdelivr.net/npm/live2d-widgets@1.0.0-rc.7/dist/，这个版本是可以找到对应的core的。 初始化：在autoload.js的initWidget函数配置的仓库： 详细的关于initWidget的参数的问题可以去原仓库看readme，这里不详细介绍了。大家在使用的时候把cdn列表里面的任意一个改为自己的用户名以及仓库名替换这里的workingcdn就好了，live2d_path建议就使用我在第二点提到的那个。\ninitWidget({ waifuPath: workingCdn + \u0026#34;waifu-tips.json\u0026#34;, cdnPath: workingCdn, cubism2Path: live2d_path + \u0026#34;live2d.min.js\u0026#34;, cubism5Path: \u0026#34;https://cubism.live2d.com/sdk-web/cubismcore/live2dcubismcore.min.js\u0026#34;, tools: [\u0026#34;hitokoto\u0026#34;, \u0026#34;asteroids\u0026#34;, \u0026#34;switch-model\u0026#34;, \u0026#34;switch-texture\u0026#34;, \u0026#34;photo\u0026#34;, \u0026#34;info\u0026#34;, \u0026#34;quit\u0026#34;], logLevel: \u0026#34;info\u0026#34;, // 改为info级别以获得更多调试信息 drag: false }); 3: 处理大文件（超过20MB的图片） 一些CDN（如jsDelivr）限制单文件20-50MB。如果有些纹理图片太大： 压缩：用WPS图片压缩或者在网上找压缩网站压缩到\u0026lt;20MB替换掉原图片。\n通过以上步骤，应该可以在博客中用上自定义Live2D模型！如果遇到问题，欢迎在评论区提出来，如果是我遇到过的问题乐意给大家解答。效果预览：我的博客\n（参考：Live2D官方文档、Reimu主题GitHub、live2d-widget、live2d-api）\n","date":"2025-09-29 00:00:00","updated":"2025-09-29 00:00:00"}]